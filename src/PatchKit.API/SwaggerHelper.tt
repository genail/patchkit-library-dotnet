<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#+
    public class SwaggerHelper
    {
		public string GetNiceArgumentName(string propertyName)
        {
            var nameChars = propertyName.ToCharArray();
            for (int i = 0; i < nameChars.Length - 1; i++)
            {
                if (i != 0 && nameChars[i - 1] == '_')
                {
                    nameChars[i] = char.ToUpper(nameChars[i]);
                }
                else
                {
                    nameChars[i] = char.ToLower(nameChars[i]);
                }
            }

            string name = new string(nameChars);

            return name.Replace("_", "");
        }

        public string GetNicePropertyName(string propertyName)
        {
            var nameChars = propertyName.ToCharArray();
            for (int i = 0; i < nameChars.Length - 1; i++)
            {
                if (i == 0 || nameChars[i - 1] == '_')
                {
                    nameChars[i] = char.ToUpper(nameChars[i]);
                }
                else
                {
                    nameChars[i] = char.ToLower(nameChars[i]);
                }
            }

            string name = new string(nameChars);

            return name.Replace("_", "");
        }

        public string GetMethodNameFromSummary(string summary)
        {
            var nameChars = summary.Replace("Gets", "Get").ToCharArray();
            for (int i = 0; i < nameChars.Length - 1; i++)
            {
                if (i == 0 || nameChars[i - 1] == ' ')
                {
                    nameChars[i] = char.ToUpper(nameChars[i]);
                }
                else
                {
                    nameChars[i] = char.ToLower(nameChars[i]);
                }
            }

            string name = new string(nameChars);

            return name.Replace(" ", "");
        }

        public string ResolveBaseTypeName(JToken token)
        {
            var type = token["type"];

            if (type != null)
            {
                string typeValue = type.Value<string>();

				if (typeValue == "integer")
				{
					string format = token["format"]?.Value<string>();

					switch (format)
					{
						case "int64":
					    {
					        return "long";
						}
						default: // int32
					    {
					        return "int";
					    }
					}
				}
				if (typeValue == "boolean")
				{
				    return "bool";
				}

                return typeValue;
            }

            return null;
        }

        public string ResolveTypeName(JToken token)
        {
            var @ref = token["$ref"];

            if (@ref != null)
            {
                return @ref.Value<string>().Replace("#/definitions/", "");
            }

            var type = ResolveBaseTypeName(token);

			if (type == "array")
			{
			    var items = token["items"];

			    if (items != null)
			    {
			        return ResolveTypeName(items)+"[]";
			    }
			}

            return type;
        }
    }
#>