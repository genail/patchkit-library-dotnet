<#@ output extension=".cs" #>
<#@ include file="SwaggerHelper.tt"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#
	//TODO: Cleanup (maybe helper class)
	var swaggerHelper = new SwaggerHelper();

    var swagger = JToken.Parse(File.ReadAllText(Host.ResolvePath("swagger.json")));
    Action<string> writeLine = str => WriteLine(CurrentIndent + str);
    Action emptyLine = () => writeLine("");
    Action pushIndent = () => PushIndent("  ");
    Action popIndent = () => PopIndent();
    Action openBracket = () =>
    {
        writeLine("{");
        pushIndent();
    };
    Action closeBracket = () =>
    {
        popIndent();
        writeLine("}");
    };

    writeLine("using System;");
    writeLine("using Newtonsoft.Json;");
    emptyLine();
	writeLine("namespace PatchKit");
    openBracket();

    writeLine("public partial class Api");
    openBracket();
	emptyLine();

	// Write struct definitions
    foreach (var definition in swagger["definitions"].Value<JObject>().Properties())
    {
        if (definition.Value["type"].Value<string>() != "object")
        {
            continue;
        }

        writeLine($"public struct {definition.Name}");
        openBracket();
        emptyLine();
        foreach (var property in definition.Value["properties"].Value<JObject>().Properties())
        {
            writeLine($"/// <summary>{property.Value["description"]?.Value<string>()}</summary>");
			writeLine($"[JsonProperty(\"{property.Name}\")]");
			writeLine($"public {swaggerHelper.ResolveTypeName(property.Value)} {swaggerHelper.GetNicePropertyName(property.Name)};");
            emptyLine();
        }
        closeBracket();
        emptyLine();
    }

	// Write methods
    foreach (var path in swagger["paths"].Value<JObject>().Properties())
    {
        var getMethod = path.Value["get"];

        if (getMethod == null)
        {
            continue;
        }

        var response = getMethod["responses"]["200"];
        var schema = response["schema"];

        string name = swaggerHelper.GetMethodNameFromSummary(getMethod["summary"].Value<string>());
		string type = swaggerHelper.ResolveTypeName(schema);

        List<string> arguments = new List<string>();
		List<string> argumentsUsage = new List<string>();

		arguments.Add("CancellableAsyncCallback callback");

		foreach (var parameter in getMethod["parameters"].OrderByDescending(token => token["required"].Value<bool>()))
		{
		    string argumentName = swaggerHelper.GetNiceArgumentName(parameter["name"].Value<string>());

			string argumentType = swaggerHelper.ResolveBaseTypeName(parameter);

			string argumentUsage = argumentName;

		    if (argumentType != "string")
		    {
		        argumentUsage += ".ToString()";
		    }

		    if (parameter["in"].Value<string>() == "path")
		    {
		        argumentUsage = $"resource = resource.Replace(\"{{{parameter["name"]}}}\", {argumentUsage});";
		    }
		    else
		    {
		        argumentUsage = $"query += \"{parameter["name"]}=\"+{argumentUsage}+\"&\";";
		    }

			string argumentDefault = string.Empty;

		    if (!parameter["required"].Value<bool>())
		    {
		        argumentDefault = " = null";

		        if (argumentType != "string")
		        {
		            argumentType = argumentDefault + "?";
		        }

		        argumentUsage = $"if ({argumentName} != null) " + argumentUsage;
		    }

            arguments.Add($"{argumentType} {argumentName}{argumentDefault}");
		    argumentsUsage.Add(argumentUsage);
		}

		arguments.Add("object state = null");

        writeLine($"/// <summary>{getMethod["description"].Value<string>()}</summary>");
        writeLine($"public ICancellableAsyncResult Begin{name}({string.Join(", ", arguments)})");
        openBracket();
        writeLine($"string resource = \"{path.Name.TrimEnd('?')}\";");
        writeLine($"string query = string.Empty;");
        foreach (var argumentUsage in argumentsUsage)
        {
            writeLine(argumentUsage);
        }
        writeLine($"return BeginApiRequest<{type}>(resource + \"?\" + query, callback, state);");
        closeBracket();
        emptyLine();

		writeLine($"public {type} End{name}(IAsyncResult asyncResult)");
        openBracket();
        writeLine($"return EndApiRequest<{type}>(asyncResult);");
        closeBracket();
        emptyLine();
    }

    closeBracket();
    closeBracket();
#>