<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using PatchKit.API.Data;
using PatchKit.API.Async;
namespace PatchKit.API
{
    public partial class PatchKitAPI
    {
		<#
		var apiResources = JToken.Parse(File.ReadAllText(Host.ResolvePath("apiResources.json")));
		foreach (var res in apiResources)
		{
			string argumentsWithTypes = string.Join(", ", res["args"].Select(arg => arg["type"] + " " + arg["name"]));
			string argumentsWithoutTypes = string.Join(", ", res["args"].Select(arg => arg["name"]));

			WriteLine("/// <summary>{0}</summary>", res["desc"]);
		    foreach (var arg in res["args"])
		    {
		#>
		<#
				WriteLine("/// <param name=\"{0}\">{1}</param>", arg["name"], arg["desc"]);
		    }
		#>
		/// <param name="callback">The <see cref="CancellableAsyncCallback" /> delegate.</param>
        /// <param name="state">The state object for this request.</param>
		<#
			WriteLine("public ICancellableAsyncResult Begin{0}({1}CancellableAsyncCallback callback = null, object state = null)", res["name"], string.IsNullOrEmpty(argumentsWithTypes) ? string.Empty : argumentsWithTypes + ", ");
		#>
		<#
			WriteLine("{");
		#>
			<#
			WriteLine("return BeginAPIRequest<{0}>(string.Format(\"{1}\"{2}), callback, state);", res["type"], res["url"], string.IsNullOrEmpty(argumentsWithoutTypes) ? string.Empty : ", " + argumentsWithoutTypes);
			#>
		<#
			WriteLine("}");
		#>
		
		<#
			WriteLine("public {0} End{1}(IAsyncResult asyncResult)", res["type"], res["name"]);
		#>
		<#
			WriteLine("{");
		#>
			<#
			WriteLine("return EndAPIRequest<{0}>(asyncResult);", res["type"]);
			#>
		<#
			WriteLine("}");
		#>

		#if NET45
		<#
		WriteLine("/// <summary>{0}</summary>", res["desc"]);
		    foreach (var arg in res["args"])
		    {
		#>
		<#
				WriteLine("/// <param name=\"{0}\">{1}</param>", arg["name"], arg["desc"]);
		    }
		#>
		/// <param name="cancellationToken">Cancellation token.</param>
		<#
			WriteLine("public System.Threading.Tasks.Task<{0}> {1}Async({2}System.Threading.CancellationToken cancellationToken)", res["type"], res["name"], string.IsNullOrEmpty(argumentsWithTypes) ? string.Empty : argumentsWithTypes + ", ");
		#>
		<#
			WriteLine("{");
		#>
			<#
			WriteLine("return ToAsync(callback => Begin{0}({1}callback), End{0}, cancellationToken);", res["name"], string.IsNullOrEmpty(argumentsWithoutTypes) ? string.Empty : argumentsWithoutTypes + ", ");
			#>
		<#
			WriteLine("}");
		#>
		#endif

		<#
		WriteLine("/// <summary>{0}</summary>", res["desc"]);
		    foreach (var arg in res["args"])
		    {
		#>
		<#
				WriteLine("/// <param name=\"{0}\">{1}</param>", arg["name"], arg["desc"]);
		    }
		#>
		<#
			WriteLine("public {0} {1}({2})", res["type"], res["name"], string.IsNullOrEmpty(argumentsWithTypes) ? string.Empty : argumentsWithTypes);
		#>
		<#
			WriteLine("{");
		#>
			<#
			WriteLine("return End{0}(Begin{0}({1}));", res["name"], argumentsWithoutTypes);
			#>
		<#
			WriteLine("}");
		#>

		<#
		}
		#>

	}
}