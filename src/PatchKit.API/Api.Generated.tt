<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="CodeGeneration/SwaggerHelper.tt"#>
<#@ include file="CodeGeneration/CodeGenerationHelper.tt"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#
    var helper = new CodeGenerationHelper(this);
    var swaggerHelper = new SwaggerHelper();
    
    var swagger = JToken.Parse(File.ReadAllText(Host.ResolvePath("swagger.json")));

    helper.WriteLine("using System;");
    helper.WriteLine("using Newtonsoft.Json;");
    
    using (helper.CreateCodeScope("namespace PatchKit"))
    {
        using (helper.CreateCodeScope("public partial class Api"))
        {
            // Write struct definitions
            foreach (var definition in swagger["definitions"].Value<JObject>().Properties())
            {
                if (definition.Value["type"].Value<string>() != "object")
                {
                    continue;
                }

                using (helper.CreateCodeScope($"public struct {definition.Name}"))
                {
                    foreach (var property in definition.Value["properties"].Value<JObject>().Properties())
                    {
                        string propertyName = swaggerHelper.GetNicePropertyName(property.Name);
                        string propertyType = swaggerHelper.ResolveType(property.Value);

                        helper.WriteDocsComment("summary", "", property.Value["description"]?.Value<string>());
                        helper.WriteLine($"[JsonProperty(\"{property.Name}\")]");
                        helper.WriteLine($"public {propertyType} {propertyName};");
                    }
                }

                helper.EmptyLine();
            }

            // Write methods
            foreach (var resource in swagger["paths"].Value<JObject>().Properties())
            {
                var getResource = resource.Value["get"];

                if (getResource == null)
                {
                    continue;
                }

                var response = getResource["responses"]["200"];

                var schema = response["schema"];

                string resourceName = swaggerHelper.GetMethodNameFromSummary(getResource["summary"].Value<string>());
                string resourceType = swaggerHelper.ResolveType(schema);

                helper.WriteDocsComment("summary", "", getResource["description"]?.Value<string>());
                helper.WriteDocsComment("param", "name=\"callback\"", "Callback.");

                var resourceArguments = new List<string>();
                var resourceArgumentsUsage = new List<string>();

                resourceArguments.Add("CancellableAsyncCallback callback");

                foreach (var argument in getResource["parameters"].OrderByDescending(token => token["required"].Value<bool>()))
                {
                    string argumentName = swaggerHelper.GetNiceArgumentName(argument["name"].Value<string>());

                    string argumentType = swaggerHelper.ResolveBaseType(argument);

                    string argumentUsage = argumentName;

                    if (argumentType != "string")
                    {
                        argumentUsage += ".ToString()";
                    }

                    if (argument["in"].Value<string>() == "path")
                    {
                        argumentUsage = $"resource = resource.Replace(\"{{{argument["name"]}}}\", {argumentUsage});";
                    }
                    else if (argument["in"].Value<string>() == "query")
                    {
                        argumentUsage = $"query += \"{argument["name"]}=\"+{argumentUsage}+\"&\";";
                    }
                    else
                    {
                        continue;
                    }

                    string argumentDefault = string.Empty;

                    if (!argument["required"].Value<bool>())
                    {
                        argumentDefault = " = null";

                        if (argumentType != "string")
                        {
                            argumentType = argumentDefault + "?";
                        }

                        argumentUsage = $"if ({argumentName} != null) " + argumentUsage;
                    }

                    helper.WriteDocsComment($"param", $"name=\"{argumentName}\"", argument["description"]?.Value<string>());

                    resourceArguments.Add($"{argumentType} {argumentName}{argumentDefault}");
                    resourceArgumentsUsage.Add(argumentUsage);
                }

                resourceArguments.Add("object state = null");

                helper.WriteDocsComment("param", "name=\"state\"", "Operation state.");

                using (helper.CreateCodeScope(
                        $"public ICancellableAsyncResult Begin{resourceName}({string.Join(", ", resourceArguments)})"))
                {
                    helper.WriteLine($"string resource = \"{resource.Name.TrimEnd('?')}\";");
                    helper.WriteLine($"string query = string.Empty;");
                    foreach (var usage in resourceArgumentsUsage)
                    {
                        helper.WriteLine(usage);
                    }
                    helper.WriteLine($"return BeginApiRequest<{resourceType}>(resource + \"?\" + query, callback, state);");
                }

                helper.EmptyLine();

                using (helper.CreateCodeScope($"public {resourceType} End{resourceName}(IAsyncResult asyncResult)"))
                {
                    helper.WriteLine($"return EndApiRequest<{resourceType}>(asyncResult);");
                }

                helper.EmptyLine();
            }
        }
    }

    

    
#>